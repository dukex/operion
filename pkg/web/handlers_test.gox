package web

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"github.com/dukex/operion/pkg/persistence/file"
	"github.com/dukex/operion/pkg/registry"
	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

type APITestSuite struct {
	suite.Suite
	app      *fiber.App
	handlers *APIHandlers
	tempDir  string
}

func (suite *APITestSuite) SetupSuite() {
	suite.tempDir = "/tmp/operion_test"
	os.RemoveAll(suite.tempDir)
	os.MkdirAll(suite.tempDir, 0755)

	persistence := file.NewFilePersistence(suite.tempDir)
	workflowRepository := application.NewWorkflowRepository(persistence)
	actionRegistry := registry.NewActionRegistry()
	triggerRegistry := registry.NewTriggerRegistry()

	// Register all actions and triggers with their schemas
	registry.RegisterAllActionsWithSchemas(actionRegistry)
	registry.RegisterAllTriggersWithSchemas(triggerRegistry)

	validator := validator.New(validator.WithRequiredStructEnabled())

	suite.handlers = NewAPIHandlers(workflowRepository, validator, actionRegistry, triggerRegistry)

	suite.app = fiber.New()
	suite.setupRoutes()
}

func (suite *APITestSuite) TearDownSuite() {
	os.RemoveAll(suite.tempDir)
}

func (suite *APITestSuite) SetupTest() {
	os.RemoveAll(suite.tempDir + "/workflows")
	os.MkdirAll(suite.tempDir+"/workflows", 0755)
}

func (suite *APITestSuite) setupRoutes() {
	suite.app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("Operion Workflow Automation API")
	})

	w := suite.app.Group("/workflows")
	w.Get("/", suite.handlers.GetWorkflows)
	w.Post("/", suite.handlers.CreateWorkflow)
	w.Get("/:id", suite.handlers.GetWorkflow)
	w.Patch("/:id", suite.handlers.PatchWorkflow)
	w.Delete("/:id", suite.handlers.DeleteWorkflow)
	w.Patch("/:id/steps", suite.handlers.PatchWorkflowSteps)
	w.Patch("/:id/triggers", suite.handlers.PatchWorkflowTriggers)

	registry := suite.app.Group("/registry")
	registry.Get("/actions", suite.handlers.GetAvailableActions)
	registry.Get("/triggers", suite.handlers.GetAvailableTriggers)
}

func (suite *APITestSuite) makeRequest(method, url string, body interface{}) (*http.Response, []byte) {
	var reqBody []byte
	if body != nil {
		reqBody, _ = json.Marshal(body)
	}

	req := httptest.NewRequest(method, url, bytes.NewReader(reqBody))
	req.Header.Set("Content-Type", "application/json")

	resp, err := suite.app.Test(req)
	suite.Require().NoError(err)

	respBody := make([]byte, resp.ContentLength)
	if resp.ContentLength > 0 {
		resp.Body.Read(respBody)
	}

	return resp, respBody
}

func (suite *APITestSuite) TestHealthCheck() {
	resp, body := suite.makeRequest("GET", "/", nil)

	assert.Equal(suite.T(), http.StatusOK, resp.StatusCode)
	assert.Equal(suite.T(), "Operion Workflow Automation API", string(body))
}

func (suite *APITestSuite) TestCreateWorkflow() {
	workflow := map[string]interface{}{
		"name":        "Test Workflow",
		"description": "A test workflow",
		"owner":       "test-user",
		"status":      "inactive",
	}

	resp, body := suite.makeRequest("POST", "/workflows", workflow)

	assert.Equal(suite.T(), http.StatusCreated, resp.StatusCode)

	var createdWorkflow domain.Workflow
	err := json.Unmarshal(body, &createdWorkflow)
	suite.Require().NoError(err)

	assert.Equal(suite.T(), "Test Workflow", createdWorkflow.Name)
	assert.Equal(suite.T(), "A test workflow", createdWorkflow.Description)
	assert.Equal(suite.T(), "test-user", createdWorkflow.Owner)
	assert.NotEmpty(suite.T(), createdWorkflow.ID)
	assert.Equal(suite.T(), domain.WorkflowStatus("inactive"), createdWorkflow.Status)
}

func (suite *APITestSuite) TestCreateWorkflowValidation() {
	workflow := map[string]interface{}{
		"name":   "ab", // too short
		"status": "inactive",
	}

	resp, body := suite.makeRequest("POST", "/workflows", workflow)

	assert.Equal(suite.T(), http.StatusBadRequest, resp.StatusCode)
	assert.Contains(suite.T(), string(body), "validation_error")
}

func (suite *APITestSuite) TestGetWorkflows() {
	workflow1 := suite.createTestWorkflow("Workflow 1", "First workflow")
	workflow2 := suite.createTestWorkflow("Workflow 2", "Second workflow")

	resp, body := suite.makeRequest("GET", "/workflows", nil)

	assert.Equal(suite.T(), http.StatusOK, resp.StatusCode)

	var workflows []domain.Workflow
	err := json.Unmarshal(body, &workflows)
	suite.Require().NoError(err)

	assert.Len(suite.T(), workflows, 2)

	workflowNames := []string{workflows[0].Name, workflows[1].Name}
	assert.Contains(suite.T(), workflowNames, workflow1.Name)
	assert.Contains(suite.T(), workflowNames, workflow2.Name)
}

func (suite *APITestSuite) TestGetWorkflow() {
	workflow := suite.createTestWorkflow("Test Workflow", "Test description")

	resp, body := suite.makeRequest("GET", fmt.Sprintf("/workflows/%s", workflow.ID), nil)

	assert.Equal(suite.T(), http.StatusOK, resp.StatusCode)

	var retrievedWorkflow domain.Workflow
	err := json.Unmarshal(body, &retrievedWorkflow)
	suite.Require().NoError(err)

	assert.Equal(suite.T(), workflow.ID, retrievedWorkflow.ID)
	assert.Equal(suite.T(), workflow.Name, retrievedWorkflow.Name)
}

func (suite *APITestSuite) TestGetWorkflowNotFound() {
	resp, body := suite.makeRequest("GET", "/workflows/nonexistent", nil)

	assert.Equal(suite.T(), http.StatusNotFound, resp.StatusCode)
	assert.Contains(suite.T(), string(body), "not_found")
}

func (suite *APITestSuite) TestPatchWorkflow() {
	workflow := suite.createTestWorkflow("Original Name", "Original description")

	patch := map[string]interface{}{
		"name":   "Updated Name",
		"status": "active",
		"variables": map[string]interface{}{
			"key1": "value1",
			"key2": 42,
		},
	}

	resp, body := suite.makeRequest("PATCH", fmt.Sprintf("/workflows/%s", workflow.ID), patch)

	assert.Equal(suite.T(), http.StatusOK, resp.StatusCode)

	var updatedWorkflow domain.Workflow
	err := json.Unmarshal(body, &updatedWorkflow)
	suite.Require().NoError(err)

	assert.Equal(suite.T(), "Updated Name", updatedWorkflow.Name)
	assert.Equal(suite.T(), "Original description", updatedWorkflow.Description) // unchanged
	assert.Equal(suite.T(), domain.WorkflowStatus("active"), updatedWorkflow.Status)
	assert.Equal(suite.T(), "value1", updatedWorkflow.Variables["key1"])
	assert.Equal(suite.T(), float64(42), updatedWorkflow.Variables["key2"])
}

func (suite *APITestSuite) TestPatchWorkflowWithSteps() {
	workflow := suite.createTestWorkflow("Test Workflow", "Test description")

	patch := map[string]interface{}{
		"steps": []map[string]interface{}{
			{
				"name": "log_step",
				"action": map[string]interface{}{
					"type":        "log",
					"name":        "Log Action",
					"description": "Log a message",
					"configuration": map[string]interface{}{
						"level":   "info",
						"message": "Hello World",
					},
				},
				"enabled": true,
			},
		},
	}

	resp, body := suite.makeRequest("PATCH", fmt.Sprintf("/workflows/%s", workflow.ID), patch)

	assert.Equal(suite.T(), http.StatusOK, resp.StatusCode)

	var updatedWorkflow domain.Workflow
	err := json.Unmarshal(body, &updatedWorkflow)
	suite.Require().NoError(err)

	assert.Len(suite.T(), updatedWorkflow.Steps, 1)
	assert.Equal(suite.T(), "log_step", updatedWorkflow.Steps[0].Name)
	assert.Equal(suite.T(), "log", updatedWorkflow.Steps[0].Action.Type)
	assert.NotEmpty(suite.T(), updatedWorkflow.Steps[0].ID)        // Should be auto-generated
	assert.NotEmpty(suite.T(), updatedWorkflow.Steps[0].Action.ID) // Should be auto-generated
}

func (suite *APITestSuite) TestPatchWorkflowInvalidActionType() {
	workflow := suite.createTestWorkflow("Test Workflow", "Test description")

	patch := map[string]interface{}{
		"steps": []map[string]interface{}{
			{
				"name": "invalid_step",
				"action": map[string]interface{}{
					"type":          "invalid_action_type",
					"name":          "Invalid Action",
					"description":   "Invalid action",
					"configuration": map[string]interface{}{},
				},
				"enabled": true,
			},
		},
	}

	resp, body := suite.makeRequest("PATCH", fmt.Sprintf("/workflows/%s", workflow.ID), patch)

	assert.Equal(suite.T(), http.StatusBadRequest, resp.StatusCode)
	assert.Contains(suite.T(), string(body), "invalid action type")
	assert.Contains(suite.T(), string(body), "Available types:")
}

func (suite *APITestSuite) TestPatchWorkflowSteps() {
	workflow := suite.createTestWorkflow("Test Workflow", "Test description")

	steps := []map[string]interface{}{
		{
			"name": "log_step",
			"action": map[string]interface{}{
				"type":        "log",
				"name":        "Log Action",
				"description": "Log a message",
				"configuration": map[string]interface{}{
					"level":   "info",
					"message": "Hello from steps",
				},
			},
			"enabled": true,
		},
		{
			"name": "http_step",
			"action": map[string]interface{}{
				"type":        "http_request",
				"name":        "HTTP Action",
				"description": "Make HTTP request",
				"configuration": map[string]interface{}{
					"url":    "https://api.example.com",
					"method": "GET",
				},
			},
			"enabled": true,
		},
	}

	resp, body := suite.makeRequest("PATCH", fmt.Sprintf("/workflows/%s/steps", workflow.ID), steps)

	assert.Equal(suite.T(), http.StatusOK, resp.StatusCode)

	var updatedSteps []domain.WorkflowStep
	err := json.Unmarshal(body, &updatedSteps)
	suite.Require().NoError(err)

	assert.Len(suite.T(), updatedSteps, 2)
	assert.Equal(suite.T(), "log_step", updatedSteps[0].Name)
	assert.Equal(suite.T(), "http_step", updatedSteps[1].Name)
	assert.Equal(suite.T(), "log", updatedSteps[0].Action.Type)
	assert.Equal(suite.T(), "http_request", updatedSteps[1].Action.Type)

	// Verify IDs are auto-generated
	assert.NotEmpty(suite.T(), updatedSteps[0].ID)
	assert.NotEmpty(suite.T(), updatedSteps[1].ID)
	assert.NotEmpty(suite.T(), updatedSteps[0].Action.ID)
	assert.NotEmpty(suite.T(), updatedSteps[1].Action.ID)
}

func (suite *APITestSuite) TestPatchWorkflowStepsInvalidAction() {
	workflow := suite.createTestWorkflow("Test Workflow", "Test description")

	steps := []map[string]interface{}{
		{
			"name": "invalid_step_name",
			"action": map[string]interface{}{
				"type":          "invalid_action_type",
				"name":          "Invalid Action",
				"description":   "Invalid action",
				"configuration": map[string]interface{}{},
			},
			"enabled": true,
		},
	}

	resp, body := suite.makeRequest("PATCH", fmt.Sprintf("/workflows/%s/steps", workflow.ID), steps)

	assert.Equal(suite.T(), http.StatusBadRequest, resp.StatusCode)
	assert.Contains(suite.T(), string(body), "invalid action type")
}

func (suite *APITestSuite) TestPatchWorkflowStepsInvalidStepName() {
	workflow := suite.createTestWorkflow("Test Workflow", "Test description")

	steps := []map[string]interface{}{
		{
			"name": "Invalid Step Name", // Should be lowercase with underscores
			"action": map[string]interface{}{
				"type":        "log",
				"name":        "Log Action",
				"description": "Log action",
				"configuration": map[string]interface{}{
					"level":   "info",
					"message": "test",
				},
			},
			"enabled": true,
		},
	}

	resp, body := suite.makeRequest("PATCH", fmt.Sprintf("/workflows/%s/steps", workflow.ID), steps)

	assert.Equal(suite.T(), http.StatusBadRequest, resp.StatusCode)
	assert.Contains(suite.T(), string(body), "invalid step name")
	assert.Contains(suite.T(), string(body), "lowercase alphanumeric with underscores only")
}

func (suite *APITestSuite) TestDeleteWorkflow() {
	workflow := suite.createTestWorkflow("Test Workflow", "Test description")

	resp, _ := suite.makeRequest("DELETE", fmt.Sprintf("/workflows/%s", workflow.ID), nil)

	assert.Equal(suite.T(), http.StatusNoContent, resp.StatusCode)

	// Verify workflow is deleted
	resp, body := suite.makeRequest("GET", fmt.Sprintf("/workflows/%s", workflow.ID), nil)
	assert.Equal(suite.T(), http.StatusNotFound, resp.StatusCode)
	assert.Contains(suite.T(), string(body), "not_found")
}

func (suite *APITestSuite) TestGetAvailableActions() {
	resp, body := suite.makeRequest("GET", "/registry/actions", nil)

	assert.Equal(suite.T(), http.StatusOK, resp.StatusCode)

	var actions []ActionInfo
	err := json.Unmarshal(body, &actions)
	suite.Require().NoError(err)

	assert.NotEmpty(suite.T(), actions)

	actionTypes := make([]string, len(actions))
	for i, action := range actions {
		actionTypes[i] = action.Type
	}

	assert.Contains(suite.T(), actionTypes, "http_request")
	assert.Contains(suite.T(), actionTypes, "transform")
	assert.Contains(suite.T(), actionTypes, "file_write")
	assert.Contains(suite.T(), actionTypes, "log")

	// Check schema structure
	for _, action := range actions {
		assert.NotEmpty(suite.T(), action.Name)
		assert.NotEmpty(suite.T(), action.Description)
		assert.NotEmpty(suite.T(), action.ConfigSchema)
	}
}

func (suite *APITestSuite) TestGetAvailableTriggers() {
	resp, body := suite.makeRequest("GET", "/registry/triggers", nil)

	assert.Equal(suite.T(), http.StatusOK, resp.StatusCode)

	var triggers []TriggerInfo
	err := json.Unmarshal(body, &triggers)
	suite.Require().NoError(err)

	assert.NotEmpty(suite.T(), triggers)

	triggerTypes := make([]string, len(triggers))
	for i, trigger := range triggers {
		triggerTypes[i] = trigger.Type
	}

	assert.Contains(suite.T(), triggerTypes, "schedule")
	// Note: Only schedule trigger has schema implemented

	// Check schema structure
	for _, trigger := range triggers {
		assert.NotEmpty(suite.T(), trigger.Name)
		assert.NotEmpty(suite.T(), trigger.Description)
		assert.NotEmpty(suite.T(), trigger.ConfigSchema)
	}
}

func (suite *APITestSuite) createTestWorkflow(name, description string) *domain.Workflow {
	workflow := map[string]interface{}{
		"name":        name,
		"description": description,
		"owner":       "test-user",
		"status":      "inactive",
	}

	resp, body := suite.makeRequest("POST", "/workflows", workflow)
	suite.Require().Equal(http.StatusCreated, resp.StatusCode)

	var createdWorkflow domain.Workflow
	err := json.Unmarshal(body, &createdWorkflow)
	suite.Require().NoError(err)

	return &createdWorkflow
}

func TestAPITestSuite(t *testing.T) {
	suite.Run(t, new(APITestSuite))
}
