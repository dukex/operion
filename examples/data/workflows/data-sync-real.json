{
  "id": "data-sync-real",
  "name": "REST Countries Data Sync",
  "description": "Synchronize country data from REST Countries API and validate data consistency",
  "status": "published",
  "workflow_group_id": "data-sync-real",
  "published_at": "2023-10-01T00:00:00Z",
  "nodes": [
    {
      "id": "sync-schedule",
      "name": "Sync Schedule Trigger",
      "node_type": "trigger:scheduler",
      "category": "trigger",
      "config": {
        "cron": "0 2 * * 0",
        "timezone": "UTC"
      },
      "enabled": true,
      "provider_id": "scheduler",
      "event_type": "schedule_due",
      "position_x": 50,
      "position_y": 100
    },
    {
      "id": "fetch-all-countries",
      "name": "Fetch All Countries",
      "config": {
        "url": "https://restcountries.com/v3.1/all?fields=name,capital,population,area,region,subregion,languages,currencies",
        "method": "GET",
        "timeout": 30,
        "headers": {
          "Accept": "application/json",
          "User-Agent": "Operion-DataSync/1.0"
        },
        "retries": {
          "attempts": 3,
          "delay": 5000
        }
      },
      "position_x": 100,
      "position_y": 100,
      "enabled": true,
      "node_type": "httprequest",
      "category": "action"
    },
    {
      "id": "fetch-region-data",
      "name": "Fetch Europe Region Data",
      "config": {
        "url": "https://restcountries.com/v3.1/region/europe?fields=name,capital,population,area",
        "method": "GET",
        "timeout": 15,
        "headers": {
          "Accept": "application/json",
          "User-Agent": "Operion-DataSync/1.0"
        }
      },
      "position_x": 100,
      "position_y": 250,
      "enabled": true,
      "node_type": "httprequest",
      "category": "action"
    },
    {
      "id": "process-countries",
      "name": "Process Countries Data",
      "config": {
        "expression": "{{ $data := index .node_results \"fetch-all-countries\" }}{{ $countries := $data.json }}{\n  \"total_countries\": {{ len $countries }},\n  \"total_population\": {{ $total := 0 }}{{ range $countries }}{{ if .population }}{{ $total = add $total .population }}{{ end }}{{ end }}{{ $total }},\n  \"largest_countries\": [{{ range $i, $country := slice (sortBy $countries \"area\" \"desc\") 0 5 }}{{ if ne $i 0 }},{{ end }}{\"name\": \"{{ .name.common }}\", \"area\": {{ .area }}, \"population\": {{ .population }}, \"region\": \"{{ .region }}\"}{{ end }}],\n  \"regions\": [{{ $regions := dict }}{{ range $countries }}{{ if not (hasKey $regions .region) }}{{ $regions = set $regions .region true }}{{ end }}{{ end }}{{ $first := true }}{{ range $key, $val := $regions }}{{ if not $first }},{{ end }}\"{{ $key }}\"{{ $first = false }}{{ end }}],\n  \"timestamp\": \"{{now}}\"\n}"
      },
      "position_x": 100,
      "position_y": 400,
      "enabled": true,
      "node_type": "transform",
      "category": "action"
    },
    {
      "id": "process-europe",
      "name": "Process Europe Data",
      "config": {
        "expression": "{{ $data := index .node_results \"fetch-region-data\" }}{{ $countries := $data.json }}{\n  \"europe_countries\": {{ len $countries }},\n  \"europe_population\": {{ $total := 0 }}{{ range $countries }}{{ if .population }}{{ $total = add $total .population }}{{ end }}{{ end }}{{ $total }},\n  \"largest_eu_countries\": [{{ range $i, $country := slice (sortBy $countries \"population\" \"desc\") 0 3 }}{{ if ne $i 0 }},{{ end }}{\"name\": \"{{ .name.common }}\", \"capital\": \"{{ if .capital }}{{ index .capital 0 }}{{ else }}N/A{{ end }}\", \"population\": {{ .population }}}{{ end }}],\n  \"timestamp\": \"{{now}}\"\n}"
      },
      "position_x": 300,
      "position_y": 400,
      "enabled": true,
      "node_type": "transform",
      "category": "action"
    },
    {
      "id": "validate-data",
      "name": "Validate Data Consistency",
      "config": {
        "expression": "{{ $countries := index .node_results \"process-countries\" }}{{ $europe := index .node_results \"process-europe\" }}{\n  \"validation\": {\n    \"total_countries_valid\": {{ gt $countries.total_countries 0 }},\n    \"population_valid\": {{ gt $countries.total_population 0 }},\n    \"europe_subset_valid\": {{ le $europe.europe_countries $countries.total_countries }},\n    \"regions_count\": {{ len $countries.regions }},\n    \"has_europe\": {{ contains $countries.regions \"Europe\" }}\n  },\n  \"data_quality_score\": {{ $score := 0 }}{{ if gt $countries.total_countries 190 }}{{ $score = add $score 1 }}{{ end }}{{ if gt $countries.total_population 7000000000 }}{{ $score = add $score 1 }}{{ end }}{{ if gt $europe.europe_countries 40 }}{{ $score = add $score 1 }}{{ end }}{{ if ge (len $countries.regions) 5 }}{{ $score = add $score 1 }}{{ end }}{{ $score }},\n  \"sync_status\": \"{{ if and (gt $countries.total_countries 190) (gt $countries.total_population 7000000000) (gt $europe.europe_countries 40) }}SUCCESS{{ else }}WARNING{{ end }}\",\n  \"timestamp\": \"{{now}}\"\n}"
      },
      "position_x": 500,
      "position_y": 400,
      "enabled": true,
      "node_type": "transform",
      "category": "action"
    },
    {
      "id": "create-sync-report",
      "name": "Create Sync Report",
      "config": {
        "expression": "{{ $countries := index .node_results \"process-countries\" }}{{ $europe := index .node_results \"process-europe\" }}{{ $validation := index .node_results \"validate-data\" }}{\n  \"sync_summary\": {\n    \"timestamp\": \"{{now}}\",\n    \"status\": \"{{ $validation.sync_status }}\",\n    \"data_quality_score\": \"{{ $validation.data_quality_score }}/4\",\n    \"statistics\": {\n      \"total_countries\": {{ $countries.total_countries }},\n      \"world_population\": {{ $countries.total_population }},\n      \"europe_countries\": {{ $europe.europe_countries }},\n      \"europe_population\": {{ $europe.europe_population }},\n      \"regions_found\": {{ len $countries.regions }}\n    }\n  },\n  \"data_samples\": {\n    \"largest_countries\": {{ $countries.largest_countries | toJson }},\n    \"largest_eu_countries\": {{ $europe.largest_eu_countries | toJson }}\n  },\n  \"validation\": {{ $validation.validation | toJson }}\n}"
      },
      "position_x": 700,
      "position_y": 400,
      "enabled": true,
      "node_type": "transform",
      "category": "action"
    },
    {
      "id": "log-sync-stats",
      "name": "Log Sync Statistics",
      "config": {
        "message": "{{ $report := index .node_results \"create-sync-report\" }}Data Sync - Status: {{ $report.sync_summary.status }}, Countries: {{ $report.sync_summary.statistics.total_countries }}, Quality Score: {{ $report.sync_summary.data_quality_score }}"
      },
      "position_x": 900,
      "position_y": 400,
      "enabled": true,
      "node_type": "log",
      "category": "action"
    },
    {
      "id": "send-sync-report",
      "name": "Send Sync Report",
      "config": {
        "url": "https://httpbin.org/post",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": "{{ $report := index .node_results \"create-sync-report\" }}{{ $validation := index .node_results \"validate-data\" }}{\n  \"service\": \"data-sync\",\n  \"timestamp\": \"{{ $report.sync_summary.timestamp }}\",\n  \"sync_status\": \"{{ $report.sync_summary.status }}\",\n  \"quality_metrics\": {\n    \"data_quality_score\": \"{{ $report.sync_summary.data_quality_score }}\",\n    \"total_records\": {{ $report.sync_summary.statistics.total_countries }},\n    \"validation_passed\": {{ $validation.validation | toJson }}\n  },\n  \"statistics\": {{ $report.sync_summary.statistics | toJson }},\n  \"sample_data\": {{ $report.data_samples | toJson }}\n}",
        "timeout": 10
      },
      "position_x": 1100,
      "position_y": 400,
      "enabled": true,
      "node_type": "httprequest",
      "category": "action"
    },
    {
      "id": "log-success",
      "name": "Log Success",
      "config": {
        "message": "{{ $report := index .node_results \"create-sync-report\" }}Data synchronization completed successfully. Status: {{ $report.sync_summary.status }}"
      },
      "position_x": 1300,
      "position_y": 350,
      "enabled": true,
      "node_type": "log",
      "category": "action"
    },
    {
      "id": "log-fetch-error",
      "name": "Log Fetch Error",
      "config": {
        "message": "Failed to fetch countries data from REST Countries API"
      },
      "position_x": 300,
      "position_y": 100,
      "enabled": true,
      "node_type": "log",
      "category": "action"
    },
    {
      "id": "log-region-error",
      "name": "Log Region Error",
      "config": {
        "message": "Failed to fetch Europe region data from REST Countries API"
      },
      "position_x": 300,
      "position_y": 250,
      "enabled": true,
      "node_type": "log",
      "category": "action"
    },
    {
      "id": "log-webhook-error",
      "name": "Log Webhook Error",
      "config": {
        "message": "Failed to send data sync report"
      },
      "position_x": 1300,
      "position_y": 450,
      "enabled": true,
      "node_type": "log",
      "category": "action"
    }
  ],
  "connections": [
    {
      "id": "trigger-sync-schedule-to-fetch-all-countries",
      "source_port": "sync-schedule:success",
      "target_port": "fetch-all-countries:main"
    },
    {
      "id": "fetch-countries-to-region",
      "source_port": "fetch-all-countries:success",
      "target_port": "fetch-region-data:main"
    },
    {
      "id": "fetch-countries-error",
      "source_port": "fetch-all-countries:error",
      "target_port": "log-fetch-error:main"
    },
    {
      "id": "region-to-process-countries",
      "source_port": "fetch-region-data:success",
      "target_port": "process-countries:main"
    },
    {
      "id": "region-error",
      "source_port": "fetch-region-data:error",
      "target_port": "log-region-error:main"
    },
    {
      "id": "countries-to-europe",
      "source_port": "process-countries:success",
      "target_port": "process-europe:main"
    },
    {
      "id": "europe-to-validate",
      "source_port": "process-europe:success",
      "target_port": "validate-data:main"
    },
    {
      "id": "validate-to-report",
      "source_port": "validate-data:success",
      "target_port": "create-sync-report:main"
    },
    {
      "id": "report-to-log",
      "source_port": "create-sync-report:success",
      "target_port": "log-sync-stats:main"
    },
    {
      "id": "log-to-send",
      "source_port": "log-sync-stats:success",
      "target_port": "send-sync-report:main"
    },
    {
      "id": "send-success",
      "source_port": "send-sync-report:success",
      "target_port": "log-success:main"
    },
    {
      "id": "send-error",
      "source_port": "send-sync-report:error",
      "target_port": "log-webhook-error:main"
    }
  ],
  "variables": {
    "sync_frequency": "weekly",
    "quality_threshold": 3
  },
  "metadata": {
    "version": "1.0",
    "author": "Operion",
    "tags": [
      "data-sync",
      "rest-countries",
      "validation",
      "real-api"
    ],
    "description": "Real data synchronization using REST Countries API. No API key required.",
    "api_requirements": {
      "restcountries": "Free API - no key required. No rate limits."
    }
  }
}