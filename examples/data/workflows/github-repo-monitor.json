{
  "id": "github-repo-monitor",
  "name": "GitHub Repository Monitor",
  "description": "Monitor GitHub repository activity including new issues, pull requests, and releases",
  "status": "active",
  "workflow_triggers": [
    {
      "id": "github-schedule",
      "name": "GitHub Monitor Schedule Trigger", 
      "description": "Trigger to monitor GitHub repo every 6 hours",
      "provider_id": "scheduler",
      "event_type": "schedule_due",
      "configuration": {
        "cron": "0 */6 * * *",
        "timezone": "UTC"
      }
    }
  ],
  "steps": [
    {
      "id": "fetch-repo-info",
      "name": "Fetch Repository Info",
      "action_id": "http_request",
      "uid": "repodata",
      "configuration": {
        "protocol": "https",
        "host": "api.github.com",
        "path": "/repos/vars.repo_owner/vars.repo_name",
        "method": "GET",
        "timeout": 10,
        "headers": {
          "Accept": "application/vnd.github.v3+json",
          "User-Agent": "Operion-GitHubMonitor/1.0"
        },
        "retry": {
          "attempts": 3,
          "delay": 2
        }
      },
      "on_success": "fetch-recent-issues",
      "on_failure": "log-repo-error",
      "enabled": true
    },
    {
      "id": "fetch-recent-issues",
      "name": "Fetch Recent Issues",
      "action_id": "http_request",
      "uid": "issuesdata",
      "configuration": {
        "protocol": "https",
        "host": "api.github.com",
        "path": "/repos/vars.repo_owner/vars.repo_name/issues?state=all&sort=updated&per_page=5",
        "method": "GET",
        "timeout": 10,
        "headers": {
          "Accept": "application/vnd.github.v3+json",
          "User-Agent": "Operion-GitHubMonitor/1.0"
        }
      },
      "on_success": "fetch-recent-releases",
      "on_failure": "log-issues-error",
      "enabled": true
    },
    {
      "id": "fetch-recent-releases",
      "name": "Fetch Recent Releases",
      "action_id": "http_request",
      "uid": "releasesdata",
      "configuration": {
        "protocol": "https",
        "host": "api.github.com",
        "path": "/repos/vars.repo_owner/vars.repo_name/releases?per_page=3",
        "method": "GET",
        "timeout": 10,
        "headers": {
          "Accept": "application/vnd.github.v3+json",
          "User-Agent": "Operion-GitHubMonitor/1.0"
        }
      },
      "on_success": "process-repo-data",
      "on_failure": "log-releases-error",
      "enabled": true
    },
    {
      "id": "process-repo-data",
      "name": "Process Repository Data",
      "action_id": "transform",
      "uid": "reposummary",
      "configuration": {
        "expression": "{\n  \"repository\": {\n    \"name\": steps.repodata.body.full_name,\n    \"description\": steps.repodata.body.description,\n    \"stars\": steps.repodata.body.stargazers_count,\n    \"forks\": steps.repodata.body.forks_count,\n    \"open_issues\": steps.repodata.body.open_issues_count,\n    \"language\": steps.repodata.body.language,\n    \"last_push\": steps.repodata.body.pushed_at\n  },\n  \"recent_issues\": $map(steps.issuesdata.body[0..2], function($issue) {\n    {\n      \"title\": $issue.title,\n      \"state\": $issue.state,\n      \"created\": $issue.created_at,\n      \"updated\": $issue.updated_at,\n      \"author\": $issue.user.login\n    }\n  }),\n  \"latest_releases\": $map(steps.releasesdata.body[0..1], function($release) {\n    {\n      \"name\": $release.name,\n      \"tag\": $release.tag_name,\n      \"published\": $release.published_at,\n      \"author\": $release.author.login\n    }\n  }),\n  \"activity_score\": steps.repodata.body.open_issues_count + $count(steps.issuesdata.body) + $count(steps.releasesdata.body),\n  \"timestamp\": $now()\n}"
      },
      "on_success": "log-activity",
      "enabled": true
    },
    {
      "id": "log-activity",
      "name": "Log Repository Activity",
      "action_id": "log",
      "uid": "activitylog",
      "configuration": {
        "message": "\"GitHub Repo \" & steps.reposummary.repository.name & \" - Stars: \" & $string(steps.reposummary.repository.stars) & \", Open Issues: \" & $string(steps.reposummary.repository.open_issues) & \", Activity Score: \" & $string(steps.reposummary.activity_score)"
      },
      "on_success": "check-high-activity",
      "enabled": true
    },
    {
      "id": "check-high-activity",
      "name": "Check High Activity",
      "action_id": "transform",
      "uid": "activitycheck",
      "configuration": {
        "expression": "{\n  \"high_activity\": steps.reposummary.activity_score > vars.activity_threshold,\n  \"alert_message\": steps.reposummary.activity_score > vars.activity_threshold ? \"High activity detected in \" & steps.reposummary.repository.name : \"Normal activity level\"\n}"
      },
      "on_success": "send-activity-report",
      "enabled": true
    },
    {
      "id": "send-activity-report",
      "name": "Send Activity Report",
      "action_id": "http_request",
      "uid": "reportresponse",
      "configuration": {
        "protocol": "https",
        "host": "httpbin.org",
        "path": "/post",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": "{\n  \"service\": \"github-monitor\",\n  \"timestamp\": steps.reposummary.timestamp,\n  \"repository\": steps.reposummary.repository,\n  \"recent_activity\": {\n    \"issues\": steps.reposummary.recent_issues,\n    \"releases\": steps.reposummary.latest_releases,\n    \"activity_score\": steps.reposummary.activity_score,\n    \"high_activity_alert\": steps.activitycheck.high_activity\n  },\n  \"alert_message\": steps.activitycheck.alert_message\n}",
        "timeout": 10
      },
      "on_success": "log-success",
      "on_failure": "log-webhook-error",
      "enabled": true
    },
    {
      "id": "log-success",
      "name": "Log Success",
      "action_id": "log",
      "uid": "successlog",
      "configuration": {
        "message": "\"GitHub monitoring completed for \" & steps.reposummary.repository.name & \". \" & steps.activitycheck.alert_message"
      },
      "enabled": true
    },
    {
      "id": "log-repo-error",
      "name": "Log Repository Error",
      "action_id": "log",
      "uid": "repoerrorlog",
      "configuration": {
        "message": "\"Failed to fetch repository data for \" & vars.repo_owner & \"/\" & vars.repo_name"
      },
      "enabled": true
    },
    {
      "id": "log-issues-error",
      "name": "Log Issues Error",
      "action_id": "log",
      "uid": "issueserrorlog",
      "configuration": {
        "message": "\"Failed to fetch issues data for \" & vars.repo_owner & \"/\" & vars.repo_name"
      },
      "enabled": true
    },
    {
      "id": "log-releases-error",
      "name": "Log Releases Error",
      "action_id": "log",
      "uid": "releaseserrorlog",
      "configuration": {
        "message": "\"Failed to fetch releases data for \" & vars.repo_owner & \"/\" & vars.repo_name"
      },
      "enabled": true
    },
    {
      "id": "log-webhook-error",
      "name": "Log Webhook Error",
      "action_id": "log",
      "uid": "webhookerrorlog",
      "configuration": {
        "message": "\"Failed to send GitHub activity report\""
      },
      "enabled": true
    }
  ],
  "variables": {
    "repo_owner": "microsoft",
    "repo_name": "vscode",
    "activity_threshold": 15
  },
  "metadata": {
    "version": "1.0",
    "author": "Operion",
    "tags": [
      "github",
      "repository",
      "monitoring",
      "issues",
      "releases",
      "real-api"
    ],
    "description": "Real GitHub repository monitoring using GitHub's free API. No authentication required for public repos.",
    "api_requirements": {
      "github": "Free API - no key required for public repos. Rate limit: 60 requests/hour"
    }
  }
}