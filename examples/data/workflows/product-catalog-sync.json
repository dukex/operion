{
  "id": "product-catalog-sync",
  "name": "Product Catalog Synchronization",
  "description": "Sync product catalog data from Fake Store API and process inventory information",
  "status": "active",
  "workflow_triggers": [
    {
      "id": "catalog-schedule",
      "name": "Product Catalog Schedule Trigger",
      "description": "Trigger to sync product catalog daily at 1 AM UTC",
      "provider_id": "scheduler",
      "event_type": "schedule_due",
      "configuration": {
        "cron": "0 1 * * *",
        "timezone": "UTC"
      }
    }
  ],
  "steps": [
    {
      "id": "fetch-all-products",
      "name": "Fetch All Products",
      "action_id": "http_request",
      "uid": "productsdata",
      "configuration": {
        "protocol": "https",
        "host": "fakestoreapi.com",
        "path": "/products",
        "method": "GET",
        "timeout": 15,
        "headers": {
          "Accept": "application/json",
          "User-Agent": "Operion-CatalogSync/1.0"
        },
        "retry": {
          "attempts": 3,
          "delay": 2
        }
      },
      "on_success": "fetch-categories",
      "on_failure": "log-products-error",
      "enabled": true
    },
    {
      "id": "fetch-categories",
      "name": "Fetch Product Categories",
      "action_id": "http_request",
      "uid": "categoriesdata",
      "configuration": {
        "protocol": "https",
        "host": "fakestoreapi.com",
        "path": "/products/categories",
        "method": "GET",
        "timeout": 10,
        "headers": {
          "Accept": "application/json",
          "User-Agent": "Operion-CatalogSync/1.0"
        }
      },
      "on_success": "process-products",
      "on_failure": "log-categories-error",
      "enabled": true
    },
    {
      "id": "process-products",
      "name": "Process Product Data",
      "action_id": "transform",
      "uid": "processedproducts",
      "configuration": {
        "expression": "{\n  \"total_products\": $count(steps.productsdata.body),\n  \"categories\": steps.categoriesdata.body,\n  \"category_stats\": $map(steps.categoriesdata.body, function($cat) {\n    {\n      \"category\": $cat,\n      \"count\": $count($filter(steps.productsdata.body, function($p) { $p.category = $cat })),\n      \"avg_price\": $round($average($map($filter(steps.productsdata.body, function($p) { $p.category = $cat }), function($p) { $p.price })), 2),\n      \"total_value\": $round($sum($map($filter(steps.productsdata.body, function($p) { $p.category = $cat }), function($p) { $p.price })), 2)\n    }\n  }),\n  \"price_analysis\": {\n    \"min_price\": $min($map(steps.productsdata.body, function($p) { $p.price })),\n    \"max_price\": $max($map(steps.productsdata.body, function($p) { $p.price })),\n    \"avg_price\": $round($average($map(steps.productsdata.body, function($p) { $p.price })), 2),\n    \"total_catalog_value\": $round($sum($map(steps.productsdata.body, function($p) { $p.price })), 2)\n  },\n  \"timestamp\": $now()\n}"
      },
      "on_success": "analyze-inventory",
      "enabled": true
    },
    {
      "id": "analyze-inventory",
      "name": "Analyze Inventory Status",
      "action_id": "transform",
      "uid": "inventoryanalysis",
      "configuration": {
        "expression": "{\n  \"top_products\": $map($sort(steps.productsdata.body, function($a, $b) {\n    $b.rating.rate - $a.rating.rate\n  })[0..2], function($product) {\n    {\n      \"id\": $product.id,\n      \"title\": $product.title,\n      \"category\": $product.category,\n      \"price\": $product.price,\n      \"rating\": $product.rating.rate,\n      \"review_count\": $product.rating.count\n    }\n  }),\n  \"expensive_products\": $map($sort(steps.productsdata.body, function($a, $b) {\n    $b.price - $a.price\n  })[0..2], function($product) {\n    {\n      \"title\": $product.title,\n      \"price\": $product.price,\n      \"category\": $product.category\n    }\n  }),\n  \"inventory_health\": {\n    \"total_categories\": $count(steps.processedproducts.categories),\n    \"products_per_category\": $round(steps.processedproducts.total_products / $count(steps.processedproducts.categories), 1),\n    \"health_score\": $min([5, $round(steps.processedproducts.total_products / 4, 0)]),\n    \"status\": steps.processedproducts.total_products > 15 ? \"HEALTHY\" : \"LOW_INVENTORY\"\n  },\n  \"timestamp\": $now()\n}"
      },
      "on_success": "create-catalog-report",
      "enabled": true
    },
    {
      "id": "create-catalog-report",
      "name": "Create Catalog Report",
      "action_id": "transform",
      "uid": "catalogreport",
      "configuration": {
        "expression": "{\n  \"catalog_summary\": {\n    \"timestamp\": $now(),\n    \"total_products\": steps.processedproducts.total_products,\n    \"total_categories\": $count(steps.processedproducts.categories),\n    \"catalog_value\": steps.processedproducts.price_analysis.total_catalog_value,\n    \"average_price\": steps.processedproducts.price_analysis.avg_price,\n    \"inventory_status\": steps.inventoryanalysis.inventory_health.status,\n    \"health_score\": steps.inventoryanalysis.inventory_health.health_score & \"/5\"\n  },\n  \"category_breakdown\": steps.processedproducts.category_stats,\n  \"featured_products\": {\n    \"top_rated\": steps.inventoryanalysis.top_products,\n    \"most_expensive\": steps.inventoryanalysis.expensive_products\n  },\n  \"price_insights\": steps.processedproducts.price_analysis\n}"
      },
      "on_success": "log-catalog-stats",
      "enabled": true
    },
    {
      "id": "log-catalog-stats",
      "name": "Log Catalog Statistics",
      "action_id": "log",
      "uid": "statslog",
      "configuration": {
        "message": "\"Catalog Sync - Products: \" & $string(steps.catalogreport.catalog_summary.total_products) & \", Categories: \" & $string(steps.catalogreport.catalog_summary.total_categories) & \", Total Value: $\" & $string(steps.catalogreport.catalog_summary.catalog_value) & \", Status: \" & steps.catalogreport.catalog_summary.inventory_status"
      },
      "on_success": "check-inventory-health",
      "enabled": true
    },
    {
      "id": "check-inventory-health",
      "name": "Check Inventory Health",
      "action_id": "transform",
      "uid": "healthcheck",
      "configuration": {
        "expression": "{\n  \"needs_attention\": steps.inventoryanalysis.inventory_health.health_score < vars.health_threshold,\n  \"alert_message\": steps.inventoryanalysis.inventory_health.health_score < vars.health_threshold ? \"Inventory health below threshold: \" & steps.inventoryanalysis.inventory_health.health_score & \"/5\" : \"Inventory health is good\",\n  \"recommendations\": steps.inventoryanalysis.inventory_health.health_score < vars.health_threshold ? [\"Consider adding more products\", \"Review category distribution\", \"Check for missing items\"] : [\"Maintain current inventory levels\"]\n}"
      },
      "on_success": "send-catalog-report",
      "enabled": true
    },
    {
      "id": "send-catalog-report",
      "name": "Send Catalog Report",
      "action_id": "http_request",
      "uid": "reportresponse",
      "configuration": {
        "protocol": "https",
        "host": "httpbin.org",
        "path": "/post",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": "{\n  \"service\": \"catalog-sync\",\n  \"timestamp\": steps.catalogreport.catalog_summary.timestamp,\n  \"summary\": steps.catalogreport.catalog_summary,\n  \"analytics\": {\n    \"category_performance\": steps.catalogreport.category_breakdown,\n    \"price_analysis\": steps.catalogreport.price_insights,\n    \"featured_products\": steps.catalogreport.featured_products\n  },\n  \"health_check\": {\n    \"status\": steps.healthcheck.alert_message,\n    \"needs_attention\": steps.healthcheck.needs_attention,\n    \"recommendations\": steps.healthcheck.recommendations\n  }\n}",
        "timeout": 10
      },
      "on_success": "log-success",
      "on_failure": "log-webhook-error",
      "enabled": true
    },
    {
      "id": "log-success",
      "name": "Log Success",
      "action_id": "log",
      "uid": "successlog",
      "configuration": {
        "message": "\"Product catalog synchronization completed. \" & steps.healthcheck.alert_message"
      },
      "enabled": true
    },
    {
      "id": "log-products-error",
      "name": "Log Products Error",
      "action_id": "log",
      "uid": "productserrorlog",
      "configuration": {
        "message": "\"Failed to fetch products from Fake Store API\""
      },
      "enabled": true
    },
    {
      "id": "log-categories-error",
      "name": "Log Categories Error",
      "action_id": "log",
      "uid": "categorieserrorlog",
      "configuration": {
        "message": "\"Failed to fetch categories from Fake Store API\""
      },
      "enabled": true
    },
    {
      "id": "log-webhook-error",
      "name": "Log Webhook Error",
      "action_id": "log",
      "uid": "webhookerrorlog",
      "configuration": {
        "message": "\"Failed to send catalog sync report\""
      },
      "enabled": true
    }
  ],
  "variables": {
    "health_threshold": 3,
    "sync_frequency": "daily"
  },
  "metadata": {
    "version": "1.0",
    "author": "Operion",
    "tags": [
      "product-catalog",
      "inventory",
      "fakestoreapi",
      "e-commerce",
      "real-api"
    ],
    "description": "Real product catalog synchronization using Fake Store API. No API key required.",
    "api_requirements": {
      "fakestoreapi": "Free API - no key required. No rate limits specified."
    }
  }
}